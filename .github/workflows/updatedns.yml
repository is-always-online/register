name: Update DNS

on:
  push:
    branches:
      - main

jobs:
  update-dns:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Parse JSON files and update DNS
        run: |
          for FILE in domains/*.json; do
            echo "Processing $FILE..."
            FILENAME=$(basename "$FILE" .json)
            SUBDOMAIN="${FILENAME}.is-always.online"
            echo "Subdomain: $SUBDOMAIN"

            A_RECORDS=$(jq -r '.record.A[]?' $FILE)
            AAAA_RECORDS=$(jq -r '.record.AAAA[]?' $FILE)
            CNAME_RECORD=$(jq -r '.record.CNAME?' $FILE)
            TXT_RECORDS=$(jq -r '.record.TXT[]?' $FILE)
            PROXIED=$(jq -r '.proxied // false' $FILE)

            echo "A Records: $A_RECORDS"
            echo "AAAA Records: $AAAA_RECORDS"
            echo "CNAME Record: $CNAME_RECORD"
            echo "TXT Records: $TXT_RECORDS"
            echo "Proxied: $PROXIED"

            # Function to check if a DNS record exists
            check_dns_record() {
              local RECORD_TYPE=$1
              local RECORD_NAME=$2
              local RECORD_CONTENT=$3

              RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/81f8e4f513c5b3c1236812614510e998/dns_records?type=${RECORD_TYPE}&name=${RECORD_NAME}" \
                --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                --header "Content-Type: application/json")

              echo "Checking existing ${RECORD_TYPE} record for ${RECORD_NAME}"
              echo "$RESPONSE" | jq -r --arg content "$RECORD_CONTENT" '.result[]? | select(.content == $content)'
            }

            # Function to create DNS records
            create_dns_record() {
              local RECORD_TYPE=$1
              local RECORD_NAME=$2
              local RECORD_CONTENT=$3
              local PROXIED_STATUS=$4

              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/81f8e4f513c5b3c1236812614510e998/dns_records" \
                --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                --header "Content-Type: application/json" \
                --data '{
                  "type": "'"${RECORD_TYPE}"'",
                  "name": "'"${RECORD_NAME}"'",
                  "content": "'"${RECORD_CONTENT}"'",
                  "proxied": '"${PROXIED_STATUS}"'
                }'

              echo "Created ${RECORD_TYPE} record for ${RECORD_NAME} with content ${RECORD_CONTENT}"
            }

            # Process A Records
            if [ -n "$A_RECORDS" ]; then
              for A in $A_RECORDS; do
                if [ "$A" != "null" ] && [ -z "$(check_dns_record "A" "$SUBDOMAIN" "$A")" ]; then
                  create_dns_record "A" "$SUBDOMAIN" "$A" "$PROXIED"
                else
                  echo "A record for $SUBDOMAIN with content $A already exists."
                fi
              done
            fi

            # Process AAAA Records
            if [ -n "$AAAA_RECORDS" ]; then
              for AAAA in $AAAA_RECORDS; do
                if [ "$AAAA" != "null" ] && [ -z "$(check_dns_record "AAAA" "$SUBDOMAIN" "$AAAA")" ]; then
                  create_dns_record "AAAA" "$SUBDOMAIN" "$AAAA" "$PROXIED"
                else
                  echo "AAAA record for $SUBDOMAIN with content $AAAA already exists."
                fi
              done
            fi

            # Process CNAME Record
            if [ -n "$CNAME_RECORD" ] && [ "$CNAME_RECORD" != "null" ] && [ -z "$(check_dns_record "CNAME" "$SUBDOMAIN" "$CNAME_RECORD")" ]; then
              create_dns_record "CNAME" "$SUBDOMAIN" "$CNAME_RECORD" "$PROXIED"
            else
              echo "CNAME record for $SUBDOMAIN with content $CNAME_RECORD already exists."
            fi

            # Process TXT Records
            if [ -n "$TXT_RECORDS" ]; then
              for TXT in $TXT_RECORDS; do
                if [ "$TXT" != "null" ] && [ -z "$(check_dns_record "TXT" "$SUBDOMAIN" "$TXT")" ]; then
                  create_dns_record "TXT" "$SUBDOMAIN" "$TXT" "$PROXIED"
                else
                  echo "TXT record for $SUBDOMAIN with content $TXT already exists."
                fi
              done
            fi
          done
